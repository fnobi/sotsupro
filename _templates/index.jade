extends layout

block variables
  - title = 'Webインタフェース構築のためのstate chart型言語'

block abstruct
  非同期処理を含むWebインタフェースを構築するための手法として、state chartを取り入れたヴィジュアルプログラミング環境を提案する。

block content
  section
    h1 背景
    section
      h1 Webページクライアントサイドにおける非同期処理
      p ユーザーの動作や、Ajaxを用いた外部ファイル読み込み等が頻繁に行われる。Javascriptは、処理を非同期で行うことによって、並列化により処理終了までの時間を短縮することができる。
      blockquote
        | Ajaxは従来のWebの動機型通信と異なり、ページ遷移を行わずに非同期でサーバとのデータの送受信を行い、ページの一部だけを更新することができる。そのため、ページの全ての情報ご更新するページングと比較すると、データの通信料が少なく、サーバに対する不可も少ない。よって、応答速度に優れた操作性を持ったインターフィエイスを提供することができる。
        | また現在利用されている、ほとんどのブラウザで利用可能なスクリプト言語である、Javascriptを中心としたマッシュアップ技術であることから、特殊なプラグインソフトウェアをインストールすることなく利用可能となる。

    section
      h1 HTML5の普及による影響
      p 現在のWebアプリケーション開発において、この非同期処理が担っている役割は大きい。HTML5の普及により、Webアプリケーションがよりリッチなインタフェースを持つようになったことが、その理由だ。これにより、スマートフォンへのマルチタッチや、本体を振るなど多種多様なイベントに対する振る舞いを取り扱う必要が出てきた。また、新しいデータを取得する場合にも、HTML全体をリクエストし直すより、Ajaxを用いて必要なデータのみをリクエストし、それを受け取ってインタフェースに組込む処理を行う、という流れが普通になってきている。

  section
    h1 研究の目的
    section
      h1 問題提起
      p ただしこの一方で、開発者にとっては分かりづらい部分も多くなっている。例えば、関数がソースコード上で書かれている順番と、実行される順番が大きく異なる場合もある。かならず立て続けに実行される処理でも、ソースコード上では一続きに書くことができない、ということが起きる。
      p ソースコードの理解しづらさは、プログラムのメンテナンス性、また共同で開発をする場合の共有のしやすさ等の観点から、開発における障害となる。しかしながら、この読みづらいコードを取り扱わなければならないという問題に対して、いまのところ抜本的な解決策はない。
      p 本研究の目的は、こうしたWebインタフェースの非同期プログラミングにおける、メンテナンス性・共有性を改善できる、開発環境を提案することである。
    section
      h1 解決方法
      p 本研究では、この問題を解決するためのヴィジュアルプログラミング環境を作成する。実行の位置が動的に変化する非同期処理を、上から下へと進むことしかできない、テキストのプログラミングで分かりやすく表現することには、限界があるからだ。
      p 非同期処理がいくつもある形の処理は、いつどの処理が終わるのを待っているか、待ち状態の遷移の形で表現できると考えられるため、state chartを取り入れた表現方法を用いる。
  section
    h1 先行研究との比較
    section
      h1 async.js, deffered.js
      p Javascriptのライブラリのレベルで、非同期処理をシンプルに書こうとする試みも、もちろんある。
      a 参考へのリンク
  section
    h1 実装
    section
      h1 state chartの実装について
    section
      h1 システム詳細
      img(src="./img/Screen Shot 2013-01-20 at 19.01.19.png")
  section
    h1 評価

    section
      h1 目的の再確認
      p 本研究の目的は、こうしたWebインタフェースの非同期プログラミングにおける、メンテナンス性・共有性を改善できる、開発環境を提案することである。この章では、今回開発したヴィジュアルプログラミング環境「sugoroku」が、プログラムのメンテナンス性・共有性を向上させることができるかどうかを評価する。

    section
      h1 実験準備
      p まずsugorokuを使って、簡単なSNS風Webアプリケーションを作成した。また、それとほぼ同じ機能と見た目を持つアプリケーションを、sugorokuを用いずJavascriptのみで作成しておく。このJavascriptのみで作成したアプリケーションについては、公開しているJavascriptを直接書き換えることができるエディターも用意した。
      p (実際のアプリケーションscreenshot)

      ul
        li アプリケーション本体
        li javascript版アプリケーション
        li javascriptエディター
        li アンケートフォーム
        li 実験用sugoroku codeのしくみ(非表示のcode、自動ファイル生成)



    section
      h1 実験
      p 実験準備で作成したふたつのアプリケーションについて、被験者に以下の作業を行ってもらう。
      ul
        li アプリケーションを、指定した通りに作り変えてもらう。
        li アプリケーションのある挙動を制御しているのがどの部分なのか、指差してもらう。

      p またこれとは別に、アンケートで以下の項目について回答してもらった。

      ul
        li プログラミングの経験
        li Javascriptプログラミングの経験
        li sugorokuの操作は分かりやすかったか(5段階)

    section
      h1 実験結果

  section
    h1 結論

  section
    h1 謝辞

  section
    h1 参考文献
    ul
      li: a(href="http://adaptivepath.com/ideas/ajax-new-approach-web-applications") Ajax: A New Approach to Web Applications - Adaptive Path
      li: a(href="http://harp.lib.hiroshima-u.ac.jp/handle/harp/8385") HARP: Ajaxの非同期通信を利用したWebチラシの自動更新およびポータルシステムの構築
      li: a(href="http://github.com/caolan/async") caolan/async · GitHub
      li: a(href="http://cho45.stfuawsc.com/jsdeferred/") JSDeferred - Asynchronous library in JavaScript. Standalone and Compact
      li: a(href="http://bizboard.nikkeibp.co.jp/houjin/cgi-bin/nsearch/md_pdf.pl/0000224168.pdf?NEWS_ID=0000224168&CONTENTS=1&bt=NCC&SYSTEM_ID=HO") 企業を熱くする最新テクノロジ Ajax 非同期通信でネット負荷を軽減 ブラウザ操作向上で業務効率改善

  section
    h1 付録
    dl
      dt 本論文URL
      dd: a(href="http://sotsupro.fnobi.com/") http://sotsupro.fnobi.com/

    dl
      dt 本システムソースコード
      dd: a(href="http://github.com/fnobi/sugoroku") http://github.com/fnobi/sugoroku
    dl
      dt 本システムデモページ
      dd: a(href="http://sugoroku.fnobi.com") http://sugoroku.fnobi.com