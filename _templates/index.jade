extends layout

block variables
  - title = 'Webインタフェース構築のための状態遷移言語'

block abstruct
  非同期処理を含むWebインタフェースを構築するための手法として、状態遷移図の表現方法を取り入れたヴィジュアルプログラミング環境を提案する。

block content
  section
    h1 背景
    section
      h1 Webアプリケーションの実装とAjax
      p Webアプリケーションを制作する際、どのようなコンテンツを生成・提供するかを決めるサーバーサイド処理、ユーザーの挙動に対応して、コンテンツを操作したり、サーバーに新たなリクエストを送ったりするクライアントサイド処理の2種類のプログラムが考えられる。

      p このうちクライアントサイドでは、Ajaxという仕組みが使われることが、近年普通になってきている。Ajaxとは、Asynchronous JavaScript + XMLの略。Javascriptを通して、Webページ全体をを再読み込みすることなく、必要なデータだけをサーバーにリクエストすることができる。この特徴により、Ajaxを活用したWebアプリケーションでは、新しい情報を出す際にページの遷移がなくなり、ユーザーが読み込みを待つ時間が減り、サーバーにかかる負荷も押さえられる。

    section
      h1 同期処理と非同期処理

      p Ajaxのもうひとつの特徴は、非同期処理という点だ。Javascriptを含む多くのプログラミング言語において、通常の進み方は同期処理と呼ばれ、ひとつの処理が終了するのを待って、次の処理に進む、という形をとっている。すなわち、プログラムのソースコードを上から下へ辿っていけば、実際に行われる処理を辿ることができる。

      img(src="img/async.png")

      p ところが、この途中にに非同期処理が入っていた場合、非同期処理の終了は待たれず、次の処理に進んでしまう。すなわち、この処理は元のプログラムとは別の流れで、並列に実行される。また、元のプログラムとは別に、この非同期処理が終わったあとに実行する処理を、「コールバック関数」として登録しておくことも多い。

      p Ajaxは、この非同期処理の形で、サーバーにリクエストを送り、取得したデータをコールバック関数を使って返す。これにより、例えばサイズの大きなファイルを、大量に読み込んだ場合でも、元のプログラムはとにかく先へ進み、読み込みが終わったものから順次画面上に表示する、ということもできる。

      p なおAjaxの他にも、画面上のボタンが押された時の処理、一定時間が経過してから実行する処理、なども非同期処理と呼ぶことができるだろう。

  section
    h1 研究の目的
    section
      h1 問題提起
      p 前章で述べた非同期処理は、開発者にとっては分かりづらい部分も増やしている。例えば、関数がソースコード上で書かれている順番と、実行される順番が大きく異なる場合もある。必ず連続して実行される処理でも、ソースコード上では一続きに書くことができない、ということも起きる。
      p ソースコードの理解しづらさは、プログラムのメンテナンス性、また共同で開発をする場合の共有のしやすさ等の観点から、開発における障害となる。しかしながら、この読みづらいコードを取り扱わなければならないという問題に対して、いまのところ抜本的な解決策はない。
      p 本研究では、こうしたWebインタフェースの非同期プログラミングにおける、メンテナンス性・共有性を改善する開発環境を提案する。
    section
      h1 解決方法
      p 本研究では、この問題を解決するためのヴィジュアルプログラミング環境を作成する。実行位置が頻繁に変化する非同期処理を、上から下へと進むことしかできない、テキストのプログラミングで分かりやすく表現することには、限界があると考えるから。
      p 非同期処理がいくつもある形の処理は、いつどの処理が終わるのを待っているか、待ち状態の遷移の形で表現できると考えられるため、状態遷移図を取り入れた表現方法を用いる。

  section
    h1 先行研究との比較
    section
      h1 async.js, deffered.js
      p ライブラリのレベルで、非同期処理をシンプルに書こうとする試みも、もちろんある。Javascriptのライブラリ「async.js」と「deffered.js」は、その中でも比較的よく知られているものだ。
      blockquote: code: pre
        | async.series([
        |     function(callback){
        |         // do some stuff ...
        |         callback(null, 'one');
        |     },
        |     function(callback){
        |         // do some more stuff ...
        |         callback(null, 'two');
        |     },
        | ],
        | // optional callback
        | function(err, results){
        |     // results is now equal to ['one', 'two']
        | });
      em async.jsを用いた非同期処理記述の例

      p ただし、いずれのライブラリも目的は、連続した非同期処理を、同期処理のように連続した形で書くことだ。すなわち、一続きになっている非同期処理を見やすい形で記述することは可能だが、コードのさまざまな場所で非同期処理が発生している場合の分かりづらさは、解決できない。

    section
      h1 Webアプリケーション構築のためのビジュアルプログラミング言語
      p Webアプリケーションをビジュアルプログラミングで構築する試みは、以前にもあった。
      p ビジュアルプログラミング言語「ゆば」は、Webサービスを構築する際のハードルを下げるために開発され、データベースと連携した本格的なアプリケーションを、ビジュアル言語のみで記述できた。
      img(src="./img/yuba.jpg", alt="「ゆば」のエディター画面")

      p また、既にサービスとして運用されているものとしては「Yahoo! Pipes」がある。こちらは、サーバーサイドでのデータ整形に特化したプログラミング環境で、複数のAPIから情報を組み合わせて、新たなデータを生成することができる。

      img(src="./img/yahoopipes.gif", alt="「Yahoo! Pipes」によるプログラミング")

      p いずれの言語も、それぞれ異なった目的を持っている。本研究のように非同期処理をシンプルにするという目的、またWebインタフェースに特化したビジュアルプログラミング言語は未だないと言える。

  section
    h1 実装
    section
      h1 システム仕様
      p 本研究では、Javascriptをベースにしたビジュアルプログラミング環境(以下、本システム)を実装した。本システムの開発は、Javascript(Node.jsによるサーバーサイド実装も含む)で行った。
    section
      h1 基本的な使い方

      p いくつかの状態を作り、それぞれ「この状况(condition)が起きたら、この状態に移動する」という形で、Webの挙動を記述できる。また、それぞれの状况(condition)や状態遷移時に実行するアクションは、Javascriptで直接編集・追加ができるようになっている。

      img(src="./img/Screen Shot 2013-01-22 at 13.06.30.png")

    section
      h1 各部分の説明

      table
        tr
          th 「save」ボタン
          td このプログラムを保存する。

        tr
          th 「new state」ボタン
          td 状態を追加する。

        tr
          th オレンジ色の四角 => 状態(state)
          td
            あるひとつの状態を表している。色の濃いものは初期状態(initial)、Webの画面を開いた時点での状態を表す。

            ul
              li
                →
                strong ドラッグ&ドロップ
                br
                ...状態の画面上での位置を動かす。
              li
                →
                strong クリック
                br
                ...選択。右のバーにその状態の情報が表示される。
              li
                →
                strong 状態名の右の●をクリック
                br
                ...そのまま、別の状態の●をクリックすると、そこまで矢印をひく。(=状態遷移する条件を追加)

        tr
          th 矢印 => 状態遷移(transition)
          td
            ある状態からある状態へ、どんな場合に移動するかを表現している。
            ul
              li
                →
                strong クリック
                br
                ...選択。右のバーにその状態の情報が表示される。

  section
    h1 考察と実験

    section
      h1 考察
      p 本システムを使うことで開発者は、Webの画面を開いてから、どんな時、ユーザーのどんな動作を待っているのか、それぞれの場合で何が起きるのか、一覧することができる。また、一覧することにより、バグや処理の抜け落ちを防ぐことができる。
      p 更に、フローチャートにも近いスタイルで、プログラムそのものを記述できるため、どのような動作をするプログラムなのか、共同作業を行う人などにも伝えやすくなる。

    section
      h1 実験
      // p 本研究の目的は、Webインタフェースの非同期プログラミングにおける、メンテナンス性・共有性を改善する、ツールを提案することである。この章では、今回開発したヴィジュアルプログラミング環境「sugoroku」が、プログラムのメンテナンス性・共有性を向上させることができるかどうかを評価する。
      p まず本システムを使って、簡単なSNS風Webアプリケーションを作成した。被験者には、このアプリケーションを、いくつかの設問に応じて変更する、という作業を行ってもらった。
      p 設問は以下の通り。2つ目の設問以降は、所要時間も計測した。
      ol
        li 本システムのエディター画面を、とりあえず色々触ってみて下さい。
        li 最初に表示される画面を、「home」ではなく「profile」にしてみて下さい。
        li 投稿の機能はまだ未完成でした! 状態「投稿」と「投稿キャンセル中」を削除して下さい。
        li
          「→」を押すたびに移動する順番を、
          ul
            li home → profile → friend ではなく、
            li profile → home → friend に変えてください。


            // p またこれとは別に、アンケートとしてプログラミングの経験(なし・1年未満・3年未満・3年以上)も答えてもらった。
    section
      h1 実験結果

      p 7人の被験者に実験を行ってもらったところ、以下のような結果が出た。なお、被験者は全員、初めてこのツールを使用し、また全員が1年以上のプログラミング経験がある。

      table
        tr
          th
          th 設問2
          th 設問3
          th 設問4
        tr
          th A
          td o / 234秒
          td o / 30秒
          td × / 12秒
        tr
          th B
          td o / 128秒
          td o / 37秒
          td o / 378秒
        tr
          th C
          td o / 34秒
          td o / 120秒
          td x / 231秒
        tr
          th D
          td o / 54秒
          td o / 35秒
          td o / 267秒
        tr
          th E
          td o / 47秒
          td o / 88秒
          td o / 231秒
        tr
          th F
          td o / 927秒
          td o / 38秒
          td o / 567秒
        tr
          th 正答数
          td 7 / 7
          td 7 / 7
          td 5 / 7
        tr
          th 平均所要時間
          td 237.3秒
          td 58秒
          td 281秒

      p この実験により、以下のことが分かった。
      ul
        li 初めてこのツールを使う人でも、最大で15分ほどで、設問に答えられている。
        li 最も難しい最後の設問は全員正解とはならなかったが、2問目と3問目では全員が設問の意図を理解し、修正するべき箇所をエディター上で見つけ、正答することができた。

      p 以上より、本システムのエディター画面は、それが何をするプログラムなのか、どの部分がどのような役割をしているのか、表現・伝達できているものと考える。

  section
    h1 結論
    p 本システムは、Webアプリケーションの非同期処理を、表現・記述するとして使うことができる。本研究では、適切な評価を行うことはできなかったため、機能・インタフェースの改善とともに、今後の目標としたい。

    // section
    //   h1 謝辞

  section
    h1 参考文献
    ul
      li
        | Ajax: A New Approach to Web Applications - Adaptive Path 
        a(href="http://adaptivepath.com/ideas/ajax-new-approach-web-applications") http://adaptivepath.com/ideas/ajax-new-approach-web-applications 
        | (閲覧日: 2013年1月22日)
      li
        | Introduction to UML 2 State Machine Diagrams 
        a(href="http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm") http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm 
        | (閲覧日: 2013年1月22日)
      li
        | HARP: Ajaxの非同期通信を利用したWebチラシの自動更新およびポータルシステムの構築 
        a(href="http://harp.lib.hiroshima-u.ac.jp/handle/harp/8385") http://harp.lib.hiroshima-u.ac.jp/handle/harp/8385 
        | (閲覧日: 2013年1月22日)
      li
        | caolan/async · GitHub 
        a(href="http://github.com/caolan/async") http://github.com/caolan/async 
        | (閲覧日: 2013年1月22日)
      li
        | JSDeferred - Asynchronous library in JavaScript. Standalone and Compact 
        a(href="http://cho45.stfuawsc.com/jsdeferred/") http://cho45.stfuawsc.com/jsdeferred/ 
        | (閲覧日: 2013年1月22日)
      li
        | 企業を熱くする最新テクノロジ Ajax 非同期通信でネット負荷を軽減 ブラウザ操作向上で業務効率改善 
        a(href="http://bizboard.nikkeibp.co.jp/houjin/cgi-bin/nsearch/md_pdf.pl/0000224168.pdf?NEWS_ID=0000224168&CONTENTS=1&bt=NCC&SYSTEM_ID=HO") http://bizboard.nikkeibp.co.jp/houjin/cgi-bin/nsearch/md_pdf.pl/0000224168.pdf?NEWS_ID=0000224168&CONTENTS=1&bt=NCC&SYSTEM_ID=HO 
        | (閲覧日: 2013年1月22日)


      li 三浦琢磨「ウェブサイト構築を目的とした データフロー型ビジュアルプログラミング言語 『ゆば』の開発」、『2007年度早稲田大学修士論文集』、2008
      li 小澤正樹「GUIの絵コンテ式ビジュアルプログラミング」、『情報処理学会研究報告. ソフトウェア工学研究会報告 94(18)』、17-24、1994-03-01
      li G. COSTAGLIOLA, A. DELUCIA, S. OREFICEz AND G. POLESE「A Classification Framework to Support the Design of Visual Languages」, Journal of Visual Languages and Computing, 13, 2002, p.573-600

  section
    h1 付録
    dl
      dt 本論文URL
      dd: a(href="http://sotsupro.fnobi.com/") http://sotsupro.fnobi.com/

    dl
      dt 本システムソースコード
      dd: a(href="http://github.com/fnobi/sugoroku") http://github.com/fnobi/sugoroku
    dl
      dt 本システムデモページ
      dd: a(href="http://sugoroku.fnobi.com") http://sugoroku.fnobi.com